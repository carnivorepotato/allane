plugins {
    id 'java'
    id "io.freefair.lombok" version "8.1.0"
    id "org.openapi.generator" version "6.6.0"
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.15"
    id 'org.springframework.boot' version '3.1.2'
    id "org.flywaydb.flyway" version "9.21.0"
}

import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

group = 'org.allane'
version = '1.0-SNAPSHOT'
description = 'Allane vehicle leasing app'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:3.1.2'
    implementation 'org.springframework.boot:spring-boot-starter-test:3.1.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.2'
    implementation 'org.hibernate.orm:hibernate-core:6.2.5.Final'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation "io.swagger.core.v3:swagger-annotations:2.2.15"
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'com.h2database:h2:2.1.214'
    implementation "org.flywaydb:flyway-core:9.21.0"
    implementation 'org.flywaydb:flyway-mysql:9.21.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    compileOnly 'org.projectlombok:lombok:1.18.26'
}

tasks.register("contract", GenerateTask) {
    generatorName.set("spring")
    inputSpec.set("$rootDir/openapi/contract.yaml")
    outputDir.set("$buildDir")
    configOptions.set([
            identifierNamingConvention: "snake_case",
            interfaceOnly: "true",
            library: "spring-boot",
            useSpringBoot3: "true",
            useSpringController: "true"
    ])
}
tasks.register("vehicle", GenerateTask) {
    generatorName.set("spring")
    inputSpec.set("$rootDir/openapi/vehicle.yaml")
    outputDir.set("$buildDir")
    configOptions.set([
            identifierNamingConvention: "snake_case",
            interfaceOnly: "true",
            library: "spring-boot",
            useSpringBoot3: "true",
            useSpringController: "true"
    ])
}
tasks.register("customer", GenerateTask) {
    generatorName.set("spring")
    inputSpec.set("$rootDir/openapi/customer.yaml")
    outputDir.set("$buildDir")
    configOptions.set([
            identifierNamingConvention: "snake_case",
            interfaceOnly: "true",
            library: "spring-boot",
            useSpringBoot3: "true",
            useSpringController: "true"
    ])
}

flyway {
    locations = ['classpath:src/main/resources/db/migration']
}

tasks.compileJava.dependsOn('contract', 'vehicle', 'customer')
tasks.flywayValidate.dependsOn('Main.main()')

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
